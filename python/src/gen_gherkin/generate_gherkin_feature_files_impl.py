"""The AaC Generate Gherkin Feature Files plugin implementation module."""

# NOTE: It is safe to edit this file.
# This file is only initially generated by aac gen-plugin, and it won't be overwritten if the file already exists.

# There may be some unused imports depending on the definition of the plugin, be sure to remove unused imports.
from typing import Any

from aac.context.definition import Definition
from aac.context.language_context import LanguageContext
from aac.context.source_location import SourceLocation
from aac.execute.aac_execution_result import (
    ExecutionResult,
    ExecutionStatus,
    ExecutionMessage,
    MessageLevel,
)
from aac.in_out.files.aac_file import AaCFile

plugin_name = "Generate Gherkin Feature Files"


def gen_gherkin_behaviors(
    architecture_file: str, output_directory: str
) -> ExecutionResult:
    """
     Business logic for allowing gen-gherkin-behaviors command to perform Generate Gherkin feature files from AaC model behavior scenarios.
     Args:
        architecture_file (str): The YAML file containing the data models from which to generate Gherkin feature files.
        output_directory (str): The directory into which the generated Gherkin feature files will be written.

    Returns:
        The results of the execution of the gen-gherkin-behaviors command.
    """
    status = ExecutionStatus.GENERAL_FAILURE
    messages: list[ExecutionMessage] = []

    with validated_source(architecture_file) as validation_result:
        loaded_templates = load_templates(__package__, ".")
        definitions_dictionary = convert_parsed_definitions_to_dict_definition(validation_result.definitions)

        for message_template_properties in _get_template_properties(definitions_dictionary):
            generated_template_messages = _generate_gherkin_feature_files(
                loaded_templates,
                output_directory,
                message_template_properties.get("behaviors", {}),
                message_template_properties.get("model_requirements", []),
            )

            write_generated_templates_to_file(generated_template_messages)

        messages.append(f"Successfully generated templates to directory: {output_directory}")
        status = ExecutionStatus.SUCCESS

    return ExecutionResult(plugin_name, "gen-gherkin-behaviors", status, messages)
